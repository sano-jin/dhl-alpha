#+title: dhl-alpha
#+subtitle: A minimal compiler and runtime for a language based on graph rewriting.
#+author: Jin SANO
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+OPTIONS: ^:nil

[[./DHL-logo-alpha.svg]]

* docs

** プログラム概要

   コンパイラは 500 LOC 程度（を目指している）
   - 現在全部で 429 LOC
   - パーザ部分を抜いて 324 LOC
   - ただし， =util.ml= の 82 LOC が別にある
    

   コンパイラ構成
  
   - parse :: 字句解析・構文解析
     - 105 LOC
   - analyzer :: 意味解析を行う
     - 142 LOC
   - generator :: 中間命令列を生成する
     - 182 LOC
   - optimizer :: （未実装だが）アトム再利用・編み上げなどの最適化を行う（かも）
     - 0 LOC
  

   仮想マシンは 290 LOC
  

   共用モジュールも含めて全て合わせると 801 LOC になる
  
  
** コーディングスタイル

   参考：
   https://ocaml.org/learn/tutorials/guidelines.html


   空行の方針
   - あまり強くは関連していない関数の間は 3 行あける
   - 補助関数などの非常に強く関連している関数の間は 2 行あける
   - 同じ関数内で独立した作業間に空行を入れたい場合は 1 行あける
     

** リダイレクトの方針

   とりあえずはインタプリタの実装方針をそのまま流用する
   - より効率化することは今後の課題


   マッチングの最後に自由リンクがマッチしたアトムの入次数に *ルール両辺での自由リンクの入次数の差分* を加算する
   - マッチングに失敗したら，これで減算することで戻してやる
   - 非単射的マッチングをしている自由リンクに関しても，同じように扱って問題ない（はず）
  
 
*** 効率化に関して

    素朴なもの
    - path-compression
    - いったん indirection アトムで置き換えるアトムをレジスタに退避してやれば，可逆でない操作もできる
      - indirection アトムで置き換えるなど
      - 流石にメモリ解放はマズそうだけど
      - indirection アトムはループ検出のために =visited= フラグを持つようにしても良いかもしれない


    より発展的には
    - 静的に知りうる情報を最大限に活用したい
      - アルゴリズムは二段階のフェーズを経由して良い
	- コンパイル時 :: 実行効率は全く気にしなくて良い
	- ランタイム時 :: この効率を最大にしたい
    - どの自由リンクをどの自由リンクへリダイレクトするかというのは，事前にわかっている情報
      - ただし，非単射的マッチングがどのように発生するかわからないというのが要になっている（気がする）
  
       
** 非単射的マッチングのための手法

   アトムをマッチするときに非単射的かどうかをチェックする
   
   - =PeakAtom=, =CheckFunctor=
   - ファンクタの異なるアトムに非単射的にマッチすることはないので，
     ファンクタの等しいアトムについてのみチェックすれば良い

     リンクのマッチを行うときにチェックする必要はないのか？
     - 局所リンクはルール左辺において必ずアトムを参照しているはずなので，局所リンクの非単射的マッチングは問題ない
     - 自由リンクに関しては少し問題？
       - ルール左辺において，アトムを参照している（incidence が出現する）自由リンクは問題ない
	 - アトムのマッチングの際に必ず非単射的マッチングをしているかチェックするため
       - ルール左辺において，アトムを参照していない（incidence が出現しない）場合は追加のチェックが必要になるか？
	 - 自由リンク同士で非単射的にマッチするのは問題ない
	 - 局所リンクと非単射的にマッチしていないか確かめる必要はあるか？
	   - 局所リンクに対して非単射的にマッチングする可能性はあるか？
	   - 局所リンクは入次数を確認しているので，自由リンクで余計に指されていたら，そもそもマッチできないはずである
	   - よって，このチェックは必要ない

