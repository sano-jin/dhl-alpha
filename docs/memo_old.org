#+title: dhlc-alpha
#+subtitle: A minimal interpreter of a language based on graph rewriting
#+author: Jin SANO
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+OPTIONS: ^:nil

[[./DHL-logo-alpha.svg]]


* プログラム概要

  コンパイラは 500 LOC 程度（を目指している）
  
** Front end

   字句解析・構文解析・意味解析を行う
   
*** LOC
    #+NAME: Front end
    #+BEGIN_SRC sh :exports results :results code :cache yes :dir ../front_end 
      ../scripts/cloc.sh "*.ml *.mll *.mly"
    #+END_SRC

    #+RESULTS[0dfc7df3e42be37e553fa2302c3c3a73040659ec]: directory
    #+begin_src sh
    -------------------------------------------------------------------------------
    File                             blank        comment           code
    -------------------------------------------------------------------------------
    breakdown.ml                        24             17             61
    parser.mly                          20             12             59
    link_check.ml                       16             11             39
    alpha.ml                            14             11             34
    lexer.mll                           10              8             34
    syntax.ml                            2              3              9
    front_end.ml                         8              9              8
    -------------------------------------------------------------------------------
    SUM:                                94             71            244
    -------------------------------------------------------------------------------
    #+end_src


** Middle end

   中間命令列を生成する
   
*** LOC
    #+NAME: Front end
    #+BEGIN_SRC sh :exports results :results code :cache yes :dir ../middle_end
      ../scripts/cloc.sh "*.ml *.mll *.mly"
    #+END_SRC

    #+RESULTS[9c84a40f9674f8481e94ff584f59ba6e3f994022]: Front end
    #+begin_src sh
    -------------------------------------------------------------------------------
    File                             blank        comment           code
    -------------------------------------------------------------------------------
    match.ml                            25             17             71
    instruction.ml                      42             80             48
    pushout.ml                          38             24             39
    gen_ic.ml                           15              6             18
    register_table.ml                    8              6             11
    -------------------------------------------------------------------------------
    SUM:                               128            133            187
    -------------------------------------------------------------------------------
    #+end_src

  

* 非単射的マッチングのための手法

  とりあえず方針1 を採用する予定
  
** 方針 1

   アトムのファンクタをマッチするときに非単射的かどうかをチェックする

   - 局所リンクはルール左辺において必ずアトムを参照しているはずなので，局所リンクの非単射的マッチングは問題ない
   - 自由リンクに関しては少し問題
     - ルール左辺において，アトムを参照している（incidence が出現する）自由リンクは問題ない？
       - アトムのマッチングの際に必ず非単射的マッチングをしているかチェックするため
     - ルール左辺において，アトムを参照していない（incidence が出現しない）場合は追加のチェックが必要になる？
       - incidence を持たない自由リンクのみを集めておいて最後にテストしてやれば良い
       - これは局所リンクと非単射的にマッチしていないか確かめるだけで良いはず
       - と思ったけど，そもそも局所リンクに対して非単射的にマッチングする可能性というのはあるのだろうか？
	 - 局所リンクは入次数を確認しているので，自由リンクで余計に指されていたら，そもそもマッチできないはずである
	 - もしかして，このチェックは必要ない？


** 方針 2
   
   まだマッチしていない局所・自由リンクが出現したときに非単射的かどうかをチェックする

   - アトムのファンクタをチェックするときにはチェックしなくて良くなる
   - ファンクタが異なるアトムに非単射的にマッチする可能性がないことを考慮すると，これは冗長な命令を生む

